import 'package:flutter/material.dart';
import 'database_helper.dart';
import 'grocery_list.dart';

class MealPlanner extends StatefulWidget {
  @override
  _MealPlannerState createState() => _MealPlannerState();
}

class _MealPlannerState extends State<MealPlanner> {
  final List<String> daysOfWeek = [
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
    'Sunday'
  ];

  final Map<String, Map<String, String>> mealPlans = {
    'Monday': {'Breakfast': '', 'Lunch': '', 'Dinner': ''},
    'Tuesday': {'Breakfast': '', 'Lunch': '', 'Dinner': ''},
    'Wednesday': {'Breakfast': '', 'Lunch': '', 'Dinner': ''},
    'Thursday': {'Breakfast': '', 'Lunch': '', 'Dinner': ''},
    'Friday': {'Breakfast': '', 'Lunch': '', 'Dinner': ''},
    'Saturday': {'Breakfast': '', 'Lunch': '', 'Dinner': ''},
    'Sunday': {'Breakfast': '', 'Lunch': '', 'Dinner': ''},
  };

  Future<void> _autoGenerateGroceryList() async {
    final dbHelper = DatabaseHelper();
    final groceryItems = <String>{};

    for (var day in daysOfWeek) {
      for (var mealType in ['Breakfast', 'Lunch', 'Dinner']) {
        final meal = mealPlans[day]?[mealType] ?? '';
        if (meal.isNotEmpty) {
          final ingredients = await dbHelper.fetchIngredientsByTitle(meal);
          groceryItems.addAll(ingredients);
        }
      }
    }

    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => GroceryList(autoGeneratedItems: groceryItems.toList()),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Meal Planner'),
        actions: [
          IconButton(
            icon: Icon(Icons.auto_awesome),
            onPressed: _autoGenerateGroceryList,
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          children: daysOfWeek.map((day) {
            return Card(
              margin: EdgeInsets.all(8.0),
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: <Widget>[
                    Text(
                      day,
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 8.0),
                    MealSection(
                      mealType: 'Breakfast',
                      onMealChanged: (meal) {
                        setState(() {
                          mealPlans[day]?['Breakfast'] = meal;
                        });
                      },
                    ),
                    MealSection(
                      mealType: 'Lunch',
                      onMealChanged: (meal) {
                        setState(() {
                          mealPlans[day]?['Lunch'] = meal;
                        });
                      },
                    ),
                    MealSection(
                      mealType: 'Dinner',
                      onMealChanged: (meal) {
                        setState(() {
                          mealPlans[day]?['Dinner'] = meal;
                        });
                      },
                    ),
                  ],
                ),
              ),
            );
          }).toList(),
        ),
      ),
    );
  }
}

class MealSection extends StatelessWidget {
  final String mealType;
  final ValueChanged<String> onMealChanged;

  MealSection({required this.mealType, required this.onMealChanged});

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: <Widget>[
        Text(
          mealType,
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
        TextField(
          decoration: InputDecoration(
            hintText: 'Enter your $mealType',
          ),
          onChanged: onMealChanged,
        ),
        SizedBox(height: 8.0),
      ],
    );
  }
}